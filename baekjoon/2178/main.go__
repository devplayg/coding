package main

import (
	"container/list"
	"fmt"
)

type Queue struct {
	q *list.List
}

type Pos struct {
	y int
	x int
	c int
}

var dy = [4]int{-1,0,1,0}
var dx = [4]int{0,1,0,-1}

func newQueue(y, x, c int) *Queue {
	queue := Queue{
		q: list.New(),
	}
	queue.q.PushBack(&Pos{y, x, c})
	return &queue
}

func (q *Queue) Enqueue(y, x, c int) {
	q.q.PushBack(&Pos{y, x, c})
	visited[y][x] = true
}

func (q *Queue) Print(prefix string, y, x, c int) {
	fmt.Printf("[%s] %d-%d-%d\n", prefix, y, x, c)
}

func (q *Queue) DeQueue() (pos *Pos) {
	if front := q.q.Front(); front != nil {
		pos = front.Value.(*Pos)
		q.q.Remove(front)
	}
	return pos
}

var N int
var M int
var arr = [101][101]int{}
var visited = [101][101]bool{}

func valid(y, x int) bool {
	if !isInBound(y, x) {
		return false
	}
	if arr[y][x] == 0 {
		return false
	}

	if visited[y][x] {
		return false
	}
	return true
}

func isInBound(y, x int) bool {
	if y > 0 && y <= N && x > 0 && x <= M {
		return true
	}
	return false
}

func main() {
	fmt.Scanf("%d %d", &N, &M)
	for y := 1; y <= N; y++ {
		for x := 1; x <= M; x++ {
			if x == 1 {
				fmt.Scanf("\n%1d", &arr[y][x])
				continue
			}
			fmt.Scanf("%1d", &arr[y][x])
		}
	}

	q := newQueue(1, 1, 1)
	for q.q.Len() > 0 {
		pos := q.DeQueue()
		if pos.y == N && pos.x == M {
			fmt.Println(pos.c)
			return
		}
		c := pos.c + 1
		for i:= 0; i<4; i++ {
			if valid(pos.y+dy[i], pos.x+dx[i]) {
				q.Enqueue(pos.y+dy[i], pos.x+dx[i], c)
			}
		}
	}
}
